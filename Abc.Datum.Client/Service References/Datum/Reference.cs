//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Abc.Logging.Datum {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Secured", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.ServerStatisticSet))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.Configuration))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.LogItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.Occurrence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.EventLogItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.ErrorItem))]
    internal partial class Secured : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Abc.Logging.Datum.Token TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Abc.Logging.Datum.Token Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Token", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class Token : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid ApplicationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValidationKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Guid ApplicationId {
            get {
                return this.ApplicationIdField;
            }
            set {
                if ((this.ApplicationIdField.Equals(value) != true)) {
                    this.ApplicationIdField = value;
                    this.RaisePropertyChanged("ApplicationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string ValidationKey {
            get {
                return this.ValidationKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ValidationKeyField, value) != true)) {
                    this.ValidationKeyField = value;
                    this.RaisePropertyChanged("ValidationKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerStatisticSet", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class ServerStatisticSet : Abc.Logging.Datum.Secured {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float CpuUsagePercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeploymentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MemoryUsagePercentageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] NetworkPercentagesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OccurredOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float PhysicalDiskUsagePercentageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal float CpuUsagePercentage {
            get {
                return this.CpuUsagePercentageField;
            }
            set {
                if ((this.CpuUsagePercentageField.Equals(value) != true)) {
                    this.CpuUsagePercentageField = value;
                    this.RaisePropertyChanged("CpuUsagePercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string DeploymentId {
            get {
                return this.DeploymentIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeploymentIdField, value) != true)) {
                    this.DeploymentIdField = value;
                    this.RaisePropertyChanged("DeploymentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal float MemoryUsagePercentage {
            get {
                return this.MemoryUsagePercentageField;
            }
            set {
                if ((this.MemoryUsagePercentageField.Equals(value) != true)) {
                    this.MemoryUsagePercentageField = value;
                    this.RaisePropertyChanged("MemoryUsagePercentage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal float[] NetworkPercentages {
            get {
                return this.NetworkPercentagesField;
            }
            set {
                if ((object.ReferenceEquals(this.NetworkPercentagesField, value) != true)) {
                    this.NetworkPercentagesField = value;
                    this.RaisePropertyChanged("NetworkPercentages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.DateTime OccurredOn {
            get {
                return this.OccurredOnField;
            }
            set {
                if ((this.OccurredOnField.Equals(value) != true)) {
                    this.OccurredOnField = value;
                    this.RaisePropertyChanged("OccurredOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal float PhysicalDiskUsagePercentage {
            get {
                return this.PhysicalDiskUsagePercentageField;
            }
            set {
                if ((this.PhysicalDiskUsagePercentageField.Equals(value) != true)) {
                    this.PhysicalDiskUsagePercentageField = value;
                    this.RaisePropertyChanged("PhysicalDiskUsagePercentage");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Configuration", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class Configuration : Abc.Logging.Datum.Secured {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string KeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Key {
            get {
                return this.KeyField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyField, value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogItem", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.Message))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.Occurrence))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.EventLogItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Abc.Logging.Datum.ErrorItem))]
    internal partial class LogItem : Abc.Logging.Datum.Secured {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeploymentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime OccurredOnField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string DeploymentId {
            get {
                return this.DeploymentIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DeploymentIdField, value) != true)) {
                    this.DeploymentIdField = value;
                    this.RaisePropertyChanged("DeploymentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.DateTime OccurredOn {
            get {
                return this.OccurredOnField;
            }
            set {
                if ((this.OccurredOnField.Equals(value) != true)) {
                    this.OccurredOnField = value;
                    this.RaisePropertyChanged("OccurredOn");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class Message : Abc.Logging.Datum.LogItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SessionIdentifierField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<System.Guid> SessionIdentifier {
            get {
                return this.SessionIdentifierField;
            }
            set {
                if ((this.SessionIdentifierField.Equals(value) != true)) {
                    this.SessionIdentifierField = value;
                    this.RaisePropertyChanged("SessionIdentifier");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Occurrence", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class Occurrence : Abc.Logging.Datum.LogItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.TimeSpan DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MethodField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SessionIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ThreadIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Class {
            get {
                return this.ClassField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassField, value) != true)) {
                    this.ClassField = value;
                    this.RaisePropertyChanged("Class");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Method {
            get {
                return this.MethodField;
            }
            set {
                if ((object.ReferenceEquals(this.MethodField, value) != true)) {
                    this.MethodField = value;
                    this.RaisePropertyChanged("Method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<System.Guid> SessionIdentifier {
            get {
                return this.SessionIdentifierField;
            }
            set {
                if ((this.SessionIdentifierField.Equals(value) != true)) {
                    this.SessionIdentifierField = value;
                    this.RaisePropertyChanged("SessionIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int ThreadId {
            get {
                return this.ThreadIdField;
            }
            set {
                if ((this.ThreadIdField.Equals(value) != true)) {
                    this.ThreadIdField = value;
                    this.RaisePropertyChanged("ThreadId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventLogItem", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class EventLogItem : Abc.Logging.Datum.LogItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Abc.Logging.Datum.EventLogEntryType EntryTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long InstanceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Abc.Logging.Datum.EventLogEntryType EntryType {
            get {
                return this.EntryTypeField;
            }
            set {
                if ((this.EntryTypeField.Equals(value) != true)) {
                    this.EntryTypeField = value;
                    this.RaisePropertyChanged("EntryType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal long InstanceId {
            get {
                return this.InstanceIdField;
            }
            set {
                if ((this.InstanceIdField.Equals(value) != true)) {
                    this.InstanceIdField = value;
                    this.RaisePropertyChanged("InstanceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ErrorItem", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    [System.SerializableAttribute()]
    internal partial class ErrorItem : Abc.Logging.Datum.LogItem {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Abc.Logging.Datum.EventTypes EventTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Abc.Logging.Datum.ErrorItem ParentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> SessionIdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StackTraceField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Abc.Logging.Datum.EventTypes EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((this.EventTypeField.Equals(value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal Abc.Logging.Datum.ErrorItem Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentField, value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal System.Nullable<System.Guid> SessionIdentifier {
            get {
                return this.SessionIdentifierField;
            }
            set {
                if ((this.SessionIdentifierField.Equals(value) != true)) {
                    this.SessionIdentifierField = value;
                    this.RaisePropertyChanged("SessionIdentifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string Source {
            get {
                return this.SourceField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceField, value) != true)) {
                    this.SourceField = value;
                    this.RaisePropertyChanged("Source");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        internal string StackTrace {
            get {
                return this.StackTraceField;
            }
            set {
                if ((object.ReferenceEquals(this.StackTraceField, value) != true)) {
                    this.StackTraceField = value;
                    this.RaisePropertyChanged("StackTrace");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventTypes", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    internal enum EventTypes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Critical = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Verbose = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Start = 256,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stop = 512,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Suspend = 1024,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resume = 2048,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transfer = 4096,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventLogEntryType", Namespace="http://schemas.datacontract.org/2004/07/Abc.Services.Contracts")]
    internal enum EventLogEntryType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SuccessAudit = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FailureAudit = 16,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Datum.IDatum")]
    internal interface IDatum {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatum/LogException", ReplyAction="http://tempuri.org/IDatum/LogExceptionResponse")]
        void LogException(Abc.Logging.Datum.ErrorItem exception);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDatum/LogException", ReplyAction="http://tempuri.org/IDatum/LogExceptionResponse")]
        System.IAsyncResult BeginLogException(Abc.Logging.Datum.ErrorItem exception, System.AsyncCallback callback, object asyncState);
        
        void EndLogException(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatum/LogMessage", ReplyAction="http://tempuri.org/IDatum/LogMessageResponse")]
        void LogMessage(Abc.Logging.Datum.Message message);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDatum/LogMessage", ReplyAction="http://tempuri.org/IDatum/LogMessageResponse")]
        System.IAsyncResult BeginLogMessage(Abc.Logging.Datum.Message message, System.AsyncCallback callback, object asyncState);
        
        void EndLogMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatum/LogServerStatisticSet", ReplyAction="http://tempuri.org/IDatum/LogServerStatisticSetResponse")]
        void LogServerStatisticSet(Abc.Logging.Datum.ServerStatisticSet data);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDatum/LogServerStatisticSet", ReplyAction="http://tempuri.org/IDatum/LogServerStatisticSetResponse")]
        System.IAsyncResult BeginLogServerStatisticSet(Abc.Logging.Datum.ServerStatisticSet data, System.AsyncCallback callback, object asyncState);
        
        void EndLogServerStatisticSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatum/LogPerformance", ReplyAction="http://tempuri.org/IDatum/LogPerformanceResponse")]
        void LogPerformance(Abc.Logging.Datum.Occurrence occurrence);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDatum/LogPerformance", ReplyAction="http://tempuri.org/IDatum/LogPerformanceResponse")]
        System.IAsyncResult BeginLogPerformance(Abc.Logging.Datum.Occurrence occurrence, System.AsyncCallback callback, object asyncState);
        
        void EndLogPerformance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatum/LogEventItem", ReplyAction="http://tempuri.org/IDatum/LogEventItemResponse")]
        void LogEventItem(Abc.Logging.Datum.EventLogItem item);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDatum/LogEventItem", ReplyAction="http://tempuri.org/IDatum/LogEventItemResponse")]
        System.IAsyncResult BeginLogEventItem(Abc.Logging.Datum.EventLogItem item, System.AsyncCallback callback, object asyncState);
        
        void EndLogEventItem(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatum/GetConfiguration", ReplyAction="http://tempuri.org/IDatum/GetConfigurationResponse")]
        Abc.Logging.Datum.Configuration[] GetConfiguration(Abc.Logging.Datum.Configuration configuration);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDatum/GetConfiguration", ReplyAction="http://tempuri.org/IDatum/GetConfigurationResponse")]
        System.IAsyncResult BeginGetConfiguration(Abc.Logging.Datum.Configuration configuration, System.AsyncCallback callback, object asyncState);
        
        Abc.Logging.Datum.Configuration[] EndGetConfiguration(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface IDatumChannel : Abc.Logging.Datum.IDatum, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class GetConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Abc.Logging.Datum.Configuration[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Abc.Logging.Datum.Configuration[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class DatumClient : System.ServiceModel.ClientBase<Abc.Logging.Datum.IDatum>, Abc.Logging.Datum.IDatum {
        
        private BeginOperationDelegate onBeginLogExceptionDelegate;
        
        private EndOperationDelegate onEndLogExceptionDelegate;
        
        private System.Threading.SendOrPostCallback onLogExceptionCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogMessageDelegate;
        
        private EndOperationDelegate onEndLogMessageDelegate;
        
        private System.Threading.SendOrPostCallback onLogMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogServerStatisticSetDelegate;
        
        private EndOperationDelegate onEndLogServerStatisticSetDelegate;
        
        private System.Threading.SendOrPostCallback onLogServerStatisticSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogPerformanceDelegate;
        
        private EndOperationDelegate onEndLogPerformanceDelegate;
        
        private System.Threading.SendOrPostCallback onLogPerformanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginLogEventItemDelegate;
        
        private EndOperationDelegate onEndLogEventItemDelegate;
        
        private System.Threading.SendOrPostCallback onLogEventItemCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetConfigurationDelegate;
        
        private EndOperationDelegate onEndGetConfigurationDelegate;
        
        private System.Threading.SendOrPostCallback onGetConfigurationCompletedDelegate;
        
        public DatumClient() {
        }
        
        public DatumClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DatumClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatumClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DatumClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogExceptionCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogMessageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogServerStatisticSetCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogPerformanceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LogEventItemCompleted;
        
        public event System.EventHandler<GetConfigurationCompletedEventArgs> GetConfigurationCompleted;
        
        public void LogException(Abc.Logging.Datum.ErrorItem exception) {
            base.Channel.LogException(exception);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogException(Abc.Logging.Datum.ErrorItem exception, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogException(exception, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogException(System.IAsyncResult result) {
            base.Channel.EndLogException(result);
        }
        
        private System.IAsyncResult OnBeginLogException(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Abc.Logging.Datum.ErrorItem exception = ((Abc.Logging.Datum.ErrorItem)(inValues[0]));
            return this.BeginLogException(exception, callback, asyncState);
        }
        
        private object[] OnEndLogException(System.IAsyncResult result) {
            this.EndLogException(result);
            return null;
        }
        
        private void OnLogExceptionCompleted(object state) {
            if ((this.LogExceptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogExceptionAsync(Abc.Logging.Datum.ErrorItem exception) {
            this.LogExceptionAsync(exception, null);
        }
        
        public void LogExceptionAsync(Abc.Logging.Datum.ErrorItem exception, object userState) {
            if ((this.onBeginLogExceptionDelegate == null)) {
                this.onBeginLogExceptionDelegate = new BeginOperationDelegate(this.OnBeginLogException);
            }
            if ((this.onEndLogExceptionDelegate == null)) {
                this.onEndLogExceptionDelegate = new EndOperationDelegate(this.OnEndLogException);
            }
            if ((this.onLogExceptionCompletedDelegate == null)) {
                this.onLogExceptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogExceptionCompleted);
            }
            base.InvokeAsync(this.onBeginLogExceptionDelegate, new object[] {
                        exception}, this.onEndLogExceptionDelegate, this.onLogExceptionCompletedDelegate, userState);
        }
        
        public void LogMessage(Abc.Logging.Datum.Message message) {
            base.Channel.LogMessage(message);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogMessage(Abc.Logging.Datum.Message message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogMessage(message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogMessage(System.IAsyncResult result) {
            base.Channel.EndLogMessage(result);
        }
        
        private System.IAsyncResult OnBeginLogMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Abc.Logging.Datum.Message message = ((Abc.Logging.Datum.Message)(inValues[0]));
            return this.BeginLogMessage(message, callback, asyncState);
        }
        
        private object[] OnEndLogMessage(System.IAsyncResult result) {
            this.EndLogMessage(result);
            return null;
        }
        
        private void OnLogMessageCompleted(object state) {
            if ((this.LogMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogMessageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogMessageAsync(Abc.Logging.Datum.Message message) {
            this.LogMessageAsync(message, null);
        }
        
        public void LogMessageAsync(Abc.Logging.Datum.Message message, object userState) {
            if ((this.onBeginLogMessageDelegate == null)) {
                this.onBeginLogMessageDelegate = new BeginOperationDelegate(this.OnBeginLogMessage);
            }
            if ((this.onEndLogMessageDelegate == null)) {
                this.onEndLogMessageDelegate = new EndOperationDelegate(this.OnEndLogMessage);
            }
            if ((this.onLogMessageCompletedDelegate == null)) {
                this.onLogMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogMessageCompleted);
            }
            base.InvokeAsync(this.onBeginLogMessageDelegate, new object[] {
                        message}, this.onEndLogMessageDelegate, this.onLogMessageCompletedDelegate, userState);
        }
        
        public void LogServerStatisticSet(Abc.Logging.Datum.ServerStatisticSet data) {
            base.Channel.LogServerStatisticSet(data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogServerStatisticSet(Abc.Logging.Datum.ServerStatisticSet data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogServerStatisticSet(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogServerStatisticSet(System.IAsyncResult result) {
            base.Channel.EndLogServerStatisticSet(result);
        }
        
        private System.IAsyncResult OnBeginLogServerStatisticSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Abc.Logging.Datum.ServerStatisticSet data = ((Abc.Logging.Datum.ServerStatisticSet)(inValues[0]));
            return this.BeginLogServerStatisticSet(data, callback, asyncState);
        }
        
        private object[] OnEndLogServerStatisticSet(System.IAsyncResult result) {
            this.EndLogServerStatisticSet(result);
            return null;
        }
        
        private void OnLogServerStatisticSetCompleted(object state) {
            if ((this.LogServerStatisticSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogServerStatisticSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogServerStatisticSetAsync(Abc.Logging.Datum.ServerStatisticSet data) {
            this.LogServerStatisticSetAsync(data, null);
        }
        
        public void LogServerStatisticSetAsync(Abc.Logging.Datum.ServerStatisticSet data, object userState) {
            if ((this.onBeginLogServerStatisticSetDelegate == null)) {
                this.onBeginLogServerStatisticSetDelegate = new BeginOperationDelegate(this.OnBeginLogServerStatisticSet);
            }
            if ((this.onEndLogServerStatisticSetDelegate == null)) {
                this.onEndLogServerStatisticSetDelegate = new EndOperationDelegate(this.OnEndLogServerStatisticSet);
            }
            if ((this.onLogServerStatisticSetCompletedDelegate == null)) {
                this.onLogServerStatisticSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogServerStatisticSetCompleted);
            }
            base.InvokeAsync(this.onBeginLogServerStatisticSetDelegate, new object[] {
                        data}, this.onEndLogServerStatisticSetDelegate, this.onLogServerStatisticSetCompletedDelegate, userState);
        }
        
        public void LogPerformance(Abc.Logging.Datum.Occurrence occurrence) {
            base.Channel.LogPerformance(occurrence);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogPerformance(Abc.Logging.Datum.Occurrence occurrence, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogPerformance(occurrence, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogPerformance(System.IAsyncResult result) {
            base.Channel.EndLogPerformance(result);
        }
        
        private System.IAsyncResult OnBeginLogPerformance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Abc.Logging.Datum.Occurrence occurrence = ((Abc.Logging.Datum.Occurrence)(inValues[0]));
            return this.BeginLogPerformance(occurrence, callback, asyncState);
        }
        
        private object[] OnEndLogPerformance(System.IAsyncResult result) {
            this.EndLogPerformance(result);
            return null;
        }
        
        private void OnLogPerformanceCompleted(object state) {
            if ((this.LogPerformanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogPerformanceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogPerformanceAsync(Abc.Logging.Datum.Occurrence occurrence) {
            this.LogPerformanceAsync(occurrence, null);
        }
        
        public void LogPerformanceAsync(Abc.Logging.Datum.Occurrence occurrence, object userState) {
            if ((this.onBeginLogPerformanceDelegate == null)) {
                this.onBeginLogPerformanceDelegate = new BeginOperationDelegate(this.OnBeginLogPerformance);
            }
            if ((this.onEndLogPerformanceDelegate == null)) {
                this.onEndLogPerformanceDelegate = new EndOperationDelegate(this.OnEndLogPerformance);
            }
            if ((this.onLogPerformanceCompletedDelegate == null)) {
                this.onLogPerformanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogPerformanceCompleted);
            }
            base.InvokeAsync(this.onBeginLogPerformanceDelegate, new object[] {
                        occurrence}, this.onEndLogPerformanceDelegate, this.onLogPerformanceCompletedDelegate, userState);
        }
        
        public void LogEventItem(Abc.Logging.Datum.EventLogItem item) {
            base.Channel.LogEventItem(item);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLogEventItem(Abc.Logging.Datum.EventLogItem item, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogEventItem(item, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLogEventItem(System.IAsyncResult result) {
            base.Channel.EndLogEventItem(result);
        }
        
        private System.IAsyncResult OnBeginLogEventItem(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Abc.Logging.Datum.EventLogItem item = ((Abc.Logging.Datum.EventLogItem)(inValues[0]));
            return this.BeginLogEventItem(item, callback, asyncState);
        }
        
        private object[] OnEndLogEventItem(System.IAsyncResult result) {
            this.EndLogEventItem(result);
            return null;
        }
        
        private void OnLogEventItemCompleted(object state) {
            if ((this.LogEventItemCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LogEventItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LogEventItemAsync(Abc.Logging.Datum.EventLogItem item) {
            this.LogEventItemAsync(item, null);
        }
        
        public void LogEventItemAsync(Abc.Logging.Datum.EventLogItem item, object userState) {
            if ((this.onBeginLogEventItemDelegate == null)) {
                this.onBeginLogEventItemDelegate = new BeginOperationDelegate(this.OnBeginLogEventItem);
            }
            if ((this.onEndLogEventItemDelegate == null)) {
                this.onEndLogEventItemDelegate = new EndOperationDelegate(this.OnEndLogEventItem);
            }
            if ((this.onLogEventItemCompletedDelegate == null)) {
                this.onLogEventItemCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLogEventItemCompleted);
            }
            base.InvokeAsync(this.onBeginLogEventItemDelegate, new object[] {
                        item}, this.onEndLogEventItemDelegate, this.onLogEventItemCompletedDelegate, userState);
        }
        
        public Abc.Logging.Datum.Configuration[] GetConfiguration(Abc.Logging.Datum.Configuration configuration) {
            return base.Channel.GetConfiguration(configuration);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetConfiguration(Abc.Logging.Datum.Configuration configuration, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetConfiguration(configuration, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Abc.Logging.Datum.Configuration[] EndGetConfiguration(System.IAsyncResult result) {
            return base.Channel.EndGetConfiguration(result);
        }
        
        private System.IAsyncResult OnBeginGetConfiguration(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Abc.Logging.Datum.Configuration configuration = ((Abc.Logging.Datum.Configuration)(inValues[0]));
            return this.BeginGetConfiguration(configuration, callback, asyncState);
        }
        
        private object[] OnEndGetConfiguration(System.IAsyncResult result) {
            Abc.Logging.Datum.Configuration[] retVal = this.EndGetConfiguration(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetConfigurationCompleted(object state) {
            if ((this.GetConfigurationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetConfigurationCompleted(this, new GetConfigurationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetConfigurationAsync(Abc.Logging.Datum.Configuration configuration) {
            this.GetConfigurationAsync(configuration, null);
        }
        
        public void GetConfigurationAsync(Abc.Logging.Datum.Configuration configuration, object userState) {
            if ((this.onBeginGetConfigurationDelegate == null)) {
                this.onBeginGetConfigurationDelegate = new BeginOperationDelegate(this.OnBeginGetConfiguration);
            }
            if ((this.onEndGetConfigurationDelegate == null)) {
                this.onEndGetConfigurationDelegate = new EndOperationDelegate(this.OnEndGetConfiguration);
            }
            if ((this.onGetConfigurationCompletedDelegate == null)) {
                this.onGetConfigurationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetConfigurationCompleted);
            }
            base.InvokeAsync(this.onBeginGetConfigurationDelegate, new object[] {
                        configuration}, this.onEndGetConfigurationDelegate, this.onGetConfigurationCompletedDelegate, userState);
        }
    }
}
